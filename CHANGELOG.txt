========[ 1.3.0 ]========
+ Added parameters to queries
+ Added connection branching.  This allows servers to split connections into different ServerListeners based on their purpose or other factors
~ Changed UNREADABLE_PACKET to UNREADABLE_DATA and migrated code for conversion of Objects into packet-ready strings to the DataTypes class
~ If the fail detector thread in Connection detects a failure in the Connection's ability to execute properly, it will interrupt the listener thread to prevent further errors
~ Simplified the code for the listenerRun() method in Connection
~ Instead of throwing an error when there is no DataType for an object, the type is just automatically converted to a String (i.e. if there is no DataType for a class, it will return the result of a call to toString() on the object)
~ Removed QueryRequests and converted their relative DataType to QueryType (handles Query class instead of QueryRequest)
* Connections now allow encryption keys even when they are not set to be encrypted.  This makes sure that in case the Connection does receive an encrypted packet, it can decrypt it without throwing errors.

========[ 1.2.0 ]========
+ Added localizations for errors and other messages
+ Added central Errors class
+ Added support for encrypted Connections
+ Added support to query the remote end for data
+ Added HandshakeClient/Server to replace their ConstantPing predecessors
~ Servers now hold Connections in ConnectionBundles rather than Connection[]s
~ Servers now include data on their name, maximum connection number, and number of current connections when the first packet is sent
~ Connections now more optimized: when set to SENDING, the thread waits until there is a waiting packet rather than looping through all of the statements every time
- Removed DatabaseClient/Server because there are better alternatives out there for the same effect.
- Removed ConstantPingClient/Server because they didn't work (tests passed but nothing ever happened).

========[ 1.1.0 ]========
+ Added database server/client
+ Added relay server/client.  These allow two or more clients to communicate with each other via a single server.
+ Added timeout option to Connections
+ Added error reporters as an alternative to simply printing the stack trace of an error
+ Added MUTUAL state for connections, meaning that the connection maintains a neutral state until it has a waiting packet or there is data to be read.
+ Added static method to retrieve local machine IP in Connection
+ Connections now calculate ping times on Packets expecting a response (they also calculate a running average)
+ Added ConstantPingClients and ConstantPingServers that are in constant communication with each other
~ The SaveMethod methods and Packet's getPacketFromString() now take Listenables as parameters, to assist with error reporting
~ The sendPacket() methods of Connection now takes a boolean called expectResponse.  This tells the Connection if it should set the timeout on the next read call or not.  If a response is expected, the timeout is set.  If one is not expected, no timeout is set to prevent unnecessary exceptions being thrown.
~ Changed method of detecting if the remote socket is closed to rely on interactions through the Connection by the programmer, rather than automated calls to write(), as these interfered with the timeout.  Whenever the programmer writes a packet or the Connection receives a packet, it will check.
~ A Connection object is now passed to the onReceive() method of NetworkListeners
~ ExtendedMap's generic type parameters no longer exist.  They are fixed and cannot be changed.  This is to assist with null catching on values
~ Changed Maven groupId and package names from com.lutz.networking to com.github.lutzblox.networking
~ Packet/String transformations are now handled by PacketReaders/Writers.  These classes allow for more configuration of how these transformations are done.
~ Switched from Maven to Gradle
~ Clients/Servers now use uninitialized Connections rather than null Connections to prevent NullPointerExceptions
* Fixed null objects crashing connections with NullPointerExceptions - null values are now represented by Null.NULL when being sent.  They are converted back when read.

========[  KEY  ]========
Additions (+)
Removals (-)
Changes (~)
Fixes (*)
